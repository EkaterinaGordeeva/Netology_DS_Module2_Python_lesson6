{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "from datetime import datetime\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#Задание 1\n",
    "#Функция, возвращающая регион, если перечисленные города есть в keyword\n",
    "def region(data):\n",
    "    for i in geo_data:\n",
    "        for j in geo_data[i]:\n",
    "            if j in data:\n",
    "                return i\n",
    "    return 'undefined'\n",
    "\n",
    "data=pd.read_csv('C:/Users/Katya/Desktop/keywords.csv')\n",
    "geo_data = {\n",
    "'Центр': ['москва', 'тула', 'ярославль'],\n",
    "'Северо-Запад': ['петербург', 'псков', 'мурманск'],\n",
    "'Дальний Восток': ['владивосток', 'сахалин', 'хабаровск']}\n",
    "\n",
    "#разделение keyword на слова через пробел\n",
    "data['keyword']=data.apply(lambda x: x['keyword'].split(' '), axis=1)\n",
    "#вызов функции опредения региона для кажой строки в keyword\n",
    "data['region']=data['keyword'].apply(lambda x: region(x))\n",
    "\n",
    "\n",
    "#Задание 2\n",
    "#Функция, возвращающая класс фильма по среднему рейтингу\n",
    "def get_class(rating):\n",
    "    if rating<=2: return 'Низкий рейтинг'\n",
    "    if 2<rating<=4: return 'Средний рейтинг'\n",
    "    if rating==4.5 or rating==5 : return 'Высокий ретинг'\n",
    "    else: return 'undefined'\n",
    "\n",
    "rating=pd.read_csv('C:/Users/Katya/Desktop/ratings.csv')\n",
    "#Группировка по фильмам с передачей в функцию get_class среднего рейтинга \n",
    "rating.groupby('movieId').mean()['rating'].apply(lambda x: get_class(x))\n",
    "\n",
    "\n",
    "#Задание 3\n",
    "\n",
    "rating=pd.read_csv('C:/Users/Katya/Desktop/ratings.csv')\n",
    "#Перевод timespamp в формат datetime\n",
    "rating['timestamp'] = rating['timestamp'].apply(lambda x: datetime.fromtimestamp(x))\n",
    "\n",
    "#Подсчет максимального и минимального времени и количества проставленных рейтингов в группировке по юзерам \n",
    "rating_grouped=rating.groupby('userId').agg({'timestamp': ['min', 'max'], 'rating': 'count'}).head()\n",
    "\n",
    "#Селекция киноманов: пользователи, проставившие 100 и более оценок\n",
    "rating_grouped=rating_grouped[rating_grouped['rating']['count']>=100]\n",
    "\n",
    "#Подсчет Lifetime для каждого пользователя\n",
    "rating_grouped['diff'] = rating_grouped['timestamp']['max'] - rating_grouped['timestamp']['min']\n",
    "\n",
    "#Перевод Lifetime в дни\n",
    "rating_grouped['diff']=rating_grouped['diff'].apply(lambda x: str(x).split()[0])\n",
    "\n",
    "\n",
    "\n",
    "#Задание 4\n",
    "\n",
    "years=[x+1 for x in range(1950,2010)]\n",
    "def production_year(data):\n",
    "    d=datetime.fromtimestamp(data)\n",
    "    if d.year in years: return d.year\n",
    "    else: return 1900\n",
    "\n",
    "rating['year']=rating['timestamp'].apply(lambda x: production_year(x))\n",
    "\n",
    "#Можно ли столбец с рейтингом при группировке как-нибудь назвать, чтобы потом к нему обратиться?\n",
    "rating.groupby('year').mean().sort_values('rating',ascending=False)['rating']\n",
    "\n",
    "#%matplotlib inline\n",
    "#plt.plot(rating['year'], rating['rating'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
